define(['exports', 'react'], (function (exports, React) { 'use strict';

    let options;
    let input_select;
    function CSelect(props) {
        options = props;
        const inputRef = React.useRef(null);
        const [searchText, setSearchText] = React.useState("");
        const [searchResults, setSearchResults] = React.useState([]);
        React.useEffect(() => {
            if (!searchText) {
                return;
            }
            var data = options.Options.items?.filter(it => (options.Op_Label.get(it).value?.indexOf(searchText) ?? -1) > -1);
            setSearchResults(data);
        }, [searchText, options]);
        const [timeoutId, setTimeoutId] = React.useState();
        React.useEffect(() => {
            let val_input = inputRef.current?.value.trim();
            if (val_input || val_input == pre_val_input) {
                return;
            }
            if (timeoutId) {
                clearTimeout(timeoutId);
            }
            var tid = setTimeout(() => {
                pre_val_input = val_input;
                setSearchText(val_input ?? "");
            }, 300);
            setTimeoutId(tid);
        }, [inputRef]);
        const renderList = () => {
            if (!searchResults) {
                return;
            }
            return searchResults.map((item, index) => {
                return (React.createElement("li", {
                    key: index, id: `content-li${index}`, className: "listItem", onClick: () => {
                        onSelectLi(item);
                    }, "data-index": index
                }));
            });
        };
        var el = React.createElement("div", { className: "css_DropdownListWithAttribute_container" },
            React.createElement("div", { className: "css_DropdownListWithAttribute" },
                React.createElement("input", { tabIndex: props.tabIndex, id: props.id, className: "css_input_select", onFocus: onInput_SelectList, readOnly: !props.Can_Search, ref: inputRef })),
            React.createElement("ul", { className: "css_DropdownListWithAttribute_list" }, renderList()));
        return el;
    }
    let pre_val_input;
    // export function onInputChange() {
    //     if (!input_select) {
    //         input_select = document.getElementById(options.id) as HTMLInputElement;
    //     }
    //     if (!input_select) {
    //         return;
    //     }
    //     let ipt = input_select;
    //     let val_input = ipt.value?.trim();
    //     if (!val_input || val_input == pre_val_input) {
    //         return;
    //     }
    //     pre_val_input = val_input;
    //     if (pre_val_input) {
    //         options.Options.items?.filter(pt => {
    //             options.Op_Label.get(pt).value?.startsWith(pre_val_input)
    //         }).map(o => {
    //         })
    //     }
    // }
    let showList = false;
    function onInput_SelectList() {
        if (!input_select) {
            input_select = document.getElementById(options.id);
        }
        if (!input_select) {
            return;
        }
        let parnt_ipt = input_select.parentElement;
        let c_cssName = 'r-180';
        if (showList) {
            parnt_ipt?.classList.remove(c_cssName);
        }
        else {
            parnt_ipt?.classList.add(c_cssName);
        }
        showList = !showList;
    }
    function onSelectLi(el) {
        if (!input_select) {
            return;
        }
        options.BindAttr.setTextValue(options.Op_Key.get(el).value?.toString() ?? "");
        input_select.value = options.Op_Label.get(el).value?.toString() ?? "";
        onInput_SelectList();
    }

    function DropdownListWithAttribute(props) {
        return React.createElement(CSelect, { ...props });
    }

    exports.DropdownListWithAttribute = DropdownListWithAttribute;

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
